<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ZeitKraut Blog</title>
    <link href="https://zeitkraut.de/atom.xml" rel="self" />
    <link href="https://zeitkraut.de" />
    <id>https://zeitkraut.de/atom.xml</id>
    <author>
        <name>Albert Krewinkel</name>
        <email>albert+feed@zeitlens.com</email>
    </author>
    <updated>2020-07-11T00:00:00Z</updated>
    <entry>
    <title>PDF Version of the Lua Manual</title>
    <link href="https://zeitkraut.de/posts/2020-07-11-pdf-of-the-lua-manual.html" />
    <id>https://zeitkraut.de/posts/2020-07-11-pdf-of-the-lua-manual.html</id>
    <published>2020-07-11T00:00:00Z</published>
    <updated>2020-07-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">PDF Version of the Lua Manual</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2020-07-11" property="datePublished">July 11, 2020</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;pandoc&#39;." href="/tags/pandoc.html">pandoc</a>, <a title="All pages tagged &#39;lua&#39;." href="/tags/lua.html">lua</a>, <a title="All pages tagged &#39;pdf&#39;." href="/tags/pdf.html">pdf</a></div>
  </div>

  <div property="articleBody">
    <p>A question came up on the Lua mailing list, asking whether there was a PDF version of the <a href="https://lua.org/manual/5.4/manual.html">Lua manual</a>. This is, of course, the home domain of pandoc, and I got nerd-sniped into producing a PDF (and ePUB) version of the manual.</p>
<p>This is a good opportunity to showcase some pandoc features. The post describes the process of going from an HTML web page to a PDF file via LaTeX and pandoc. We will see how to</p>
<ol type="1">
<li>quickly convert documents with pandoc;</li>
<li>use Lua filters to improve the result by modifying the document; and</li>
<li>fine-tune the output by setting appropriate pandoc options.</li>
</ol>
<h2 id="invoking-pandoc">Invoking pandoc</h2>
<p>The first step is to call pandoc on the Lua manual website. Even when keeping everything bare-bones, the result is already decent:</p>
<pre><code>pandoc --pdf-engine=xelatex --output=lua-manual.pdf \
    &quot;https://lua.org/manual/5.4/manual.html&quot;
    </code></pre>
<p>Produces</p>
<figure>
<img src="/img/lua-refman-naive.png" alt="" /><figcaption>First page of unoptimized PDF</figcaption>
</figure>
<p>This requires a somewhat recent version of pandoc as well as XeLaTeX to be installed. It is possible to forgo the trouble of installing the requirements by using the <em>pandoc/latex</em> Docker image:</p>
<pre><code>docker run --rm -v &quot;$PWD&quot;:/data -u $(id -u):$(id -g) pandoc/latex:2.9.2.1 \
    --pdf-engine=xelatex --output=lua-manual.pdf \
    &quot;https://lua.org/manual/5.4/manual.html&quot;</code></pre>
<h2 id="replacing-characters">Replacing characters</h2>
<p>The above commands will produce warnings about characters which are unavailable in the default fonts. We don’t want characters to go missing, of course, so let’s fix that first. The warnings are:</p>
<pre><code>[WARNING] Missing character: There is no ≤ (U+2264) in font [lmmono10-regular]:!
[WARNING] Missing character: There is no ≤ (U+2264) in font [lmmono10-regular]:!
[WARNING] Missing character: There is no π (U+03C0) in font [lmroman10-italic]:mapping=tex-text;!</code></pre>
<p>Searching the page for <code>≤</code> shows that it is used in inline code, while <code>π</code> occurs as emphasized character in the description of <code>math.pi</code>. We could, of course, search for a font which has the appropriate glyphs and instruct pandoc/LaTeX to use it. But we’ll go a different route.</p>
<p>A good way to improve the result of a converstion is to use a pandoc <a href="https://pandoc.org/lua-filters.html">Lua filter</a>. We create a file called <code>beautify-manual.lua</code> and pass it to pandoc via the <code>--lua-filter=beautify-manual.lua</code> command line option.</p>
<p>Handling <code>≤</code> is straight forward, we just replace the char with the slightly uglier looking ASCII sequence <code>&lt;=</code> in all code elements.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">function</span> Code <span class="op">(</span>c<span class="op">)</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>  c<span class="op">.</span>text <span class="op">=</span> c<span class="op">.</span>text<span class="op">:</span><span class="fu">gsub</span><span class="op">(</span><span class="st">&#39;≤&#39;</span><span class="op">,</span> <span class="st">&#39;&lt;=&#39;</span><span class="op">)</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>  <span class="cf">return</span> c</span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="cf">end</span></span></code></pre></div>
<p>While there is no italics version <code>π</code> in the default font, there <em>is</em> such a glyph in the default math font. Pandoc’s internal representation for <em>π</em> is <code>Emph [Str "π"]</code>, which we replace with a math element holding the same content.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">function</span> Emph <span class="op">(</span>e<span class="op">)</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>  <span class="kw">local</span> s <span class="op">=</span> e<span class="op">.</span>content<span class="op">[</span><span class="dv">1</span><span class="op">]</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>  <span class="cf">if</span> <span class="op">#</span>e<span class="op">.</span>content <span class="op">==</span> <span class="dv">1</span> <span class="kw">and</span> s<span class="op">.</span>tag <span class="op">==</span> <span class="st">&#39;Str&#39;</span> <span class="kw">and</span> s<span class="op">.</span>text <span class="op">==</span> <span class="st">&#39;π&#39;</span> <span class="cf">then</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>    <span class="cf">return</span> pandoc<span class="op">.</span>Math<span class="op">(</span><span class="st">&#39;InlineMath&#39;</span><span class="op">,</span> <span class="st">&#39;π&#39;</span><span class="op">)</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>  <span class="cf">end</span></span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="cf">end</span></span></code></pre></div>
<p>The document now compiles without warnings, and all characters are properly included.</p>
<h2 id="add-table-of-contents">Add Table of Contents</h2>
<p>The Lua manual is long, often used as a reference, and, in its HTML version, comes with a table of contents on a separate page. The PDF, for it to be useful as a reference, should have a table of contents as well. Pandoc can be told to generate a table of contents by adding the <code>--toc</code> command line flag. The toc depth is controlled via <code>--toc-depth</code>; <code>2</code> is a good setting here. However, in this case, the result is neither pleasing nor informative:</p>
<figure>
<img src="/img/bad-toc.png" alt="" /><figcaption>Bad looking table of contents</figcaption>
</figure>
<p>Something is terribly wrong. By inspecting the parsed document by running <code>pandoc --to=native …</code>, we see that all <em>Header</em>s contain a <em>Span</em>. That span holds the actual contents. Apparently LaTeX does not like this and omits the content of the span when generating the toc.</p>
<p>The span also has the id used by links to the header. Numbered sections start with the section number, which we’d rather produce via pandoc.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">function</span> Header <span class="op">(</span>h<span class="op">)</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>  <span class="co">-- Unnumbered sections have the main contents as the first element.</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>  <span class="co">-- Numbered sections start with the number and an em-dash, so</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>  <span class="co">-- the Span is the fifth element (Lua multipass).</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>  <span class="kw">local</span> span</span>
<span id="cb6-6"><a href="#cb6-6"></a>  <span class="cf">if</span> h<span class="op">.</span>content<span class="op">[</span><span class="dv">1</span><span class="op">].</span>tag <span class="op">==</span> <span class="st">&#39;Str&#39;</span> <span class="kw">and</span> h<span class="op">.</span>content<span class="op">[</span><span class="dv">1</span><span class="op">].</span>text<span class="op">:</span><span class="fu">match</span> <span class="st">&#39;[%d%.]+&#39;</span> <span class="cf">then</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>    span <span class="op">=</span> h<span class="op">.</span>content<span class="op">[</span><span class="dv">5</span><span class="op">]</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>  <span class="cf">else</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>    span <span class="op">=</span> h<span class="op">.</span>content<span class="op">[</span><span class="dv">1</span><span class="op">]</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>    h<span class="op">.</span>classes<span class="op">:</span><span class="fu">insert</span><span class="op">(</span><span class="st">&#39;unnumbered&#39;</span><span class="op">)</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>  <span class="cf">end</span></span>
<span id="cb6-12"><a href="#cb6-12"></a></span>
<span id="cb6-13"><a href="#cb6-13"></a>  h<span class="op">.</span>identifier <span class="op">=</span> span<span class="op">.</span>identifier</span>
<span id="cb6-14"><a href="#cb6-14"></a>  h<span class="op">.</span>content <span class="op">=</span> span<span class="op">.</span>content</span>
<span id="cb6-15"><a href="#cb6-15"></a></span>
<span id="cb6-16"><a href="#cb6-16"></a>  <span class="cf">return</span> h</span>
<span id="cb6-17"><a href="#cb6-17"></a><span class="cf">end</span></span></code></pre></div>
<p>The filter also removes the section numbering. We add it back by passing <code>--number-sections</code> to pandoc.</p>
<figure>
<img src="/img/less-bad-toc.png" alt="" /><figcaption>less-bad table of contents</figcaption>
</figure>
<p>Not bad.</p>
<h2 id="improve-title-and-metadata">Improve title and metadata</h2>
<p>The PDF is already quite usable, let’s prettify it a bit more: It would be important to properly list the authors in the title and metadata, remove the unnecessary first header, and maybe add the Lua logo to the title. All this is easiest when acting on the full document.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">function</span> Pandoc <span class="op">(</span>doc<span class="op">)</span></span>
<span id="cb7-2"><a href="#cb7-2"></a>  <span class="co">-- comma separated authors</span></span>
<span id="cb7-3"><a href="#cb7-3"></a>  <span class="kw">local</span> authors <span class="op">=</span> doc<span class="op">.</span>blocks<span class="op">[</span><span class="dv">2</span><span class="op">]</span></span>
<span id="cb7-4"><a href="#cb7-4"></a>  authors<span class="op">.</span>content<span class="op">:</span><span class="fu">remove</span><span class="op">(</span><span class="dv">1</span><span class="op">)</span>  <span class="co">-- remove &#39;by&#39;</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>  doc<span class="op">.</span>meta<span class="op">.</span>author <span class="op">=</span> pandoc<span class="op">.</span>List<span class="op">()</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>  <span class="cf">for</span> author <span class="kw">in</span> pandoc<span class="op">.</span>utils<span class="op">.</span>stringify<span class="op">(</span>authors<span class="op">):</span><span class="fu">gmatch</span> <span class="st">&#39;[^,]+&#39;</span> <span class="cf">do</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>    doc<span class="op">.</span>meta<span class="op">.</span>author<span class="op">:</span><span class="fu">insert</span><span class="op">(</span>author<span class="op">)</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>  <span class="cf">end</span></span>
<span id="cb7-9"><a href="#cb7-9"></a></span>
<span id="cb7-10"><a href="#cb7-10"></a>  <span class="co">-- Remove unnecessary blocks</span></span>
<span id="cb7-11"><a href="#cb7-11"></a>  doc<span class="op">.</span>blocks<span class="op">:</span><span class="fu">remove</span><span class="op">(</span><span class="dv">4</span><span class="op">)</span> <span class="co">-- menubar</span></span>
<span id="cb7-12"><a href="#cb7-12"></a>  doc<span class="op">.</span>blocks<span class="op">:</span><span class="fu">remove</span><span class="op">(</span><span class="dv">2</span><span class="op">)</span> <span class="co">-- authors paragraph</span></span>
<span id="cb7-13"><a href="#cb7-13"></a>  doc<span class="op">.</span>blocks<span class="op">:</span><span class="fu">remove</span><span class="op">(</span><span class="dv">1</span><span class="op">)</span> <span class="co">-- title header</span></span>
<span id="cb7-14"><a href="#cb7-14"></a></span>
<span id="cb7-15"><a href="#cb7-15"></a>  <span class="co">-- add subtitle image</span></span>
<span id="cb7-16"><a href="#cb7-16"></a>  doc<span class="op">.</span>meta<span class="op">.</span>subtitle <span class="op">=</span> pandoc<span class="op">.</span>MetaInlines<span class="op">{</span></span>
<span id="cb7-17"><a href="#cb7-17"></a>    pandoc<span class="op">.</span>RawInline<span class="op">(</span><span class="st">&#39;latex&#39;</span><span class="op">,</span> <span class="st">&#39;</span><span class="sc">\\</span><span class="st">vspace{1em}&#39;</span><span class="op">),</span></span>
<span id="cb7-18"><a href="#cb7-18"></a>    pandoc<span class="op">.</span>Image<span class="op">(</span><span class="st">&quot;Lua logo&quot;</span><span class="op">,</span> <span class="co">-- &quot;https://www.lua.org/images/lua-logo.gif&quot;)</span></span>
<span id="cb7-19"><a href="#cb7-19"></a>  <span class="op">}</span></span>
<span id="cb7-20"><a href="#cb7-20"></a>  <span class="cf">return</span> doc</span>
<span id="cb7-21"><a href="#cb7-21"></a><span class="cf">end</span></span></code></pre></div>
<h2 id="final-touch">Final touch</h2>
<p>Finally, we may want the PDF to add a little more visible structure, e.g., starting top-level sections on their own page.</p>
<p>The command used by pandoc to create the top level headings can be controlled with the <code>--top-level-division</code> option. Setting that option to <code>chapter</code> ensures that each major section starts on a new page. However, the default document class used by LaTeX doesn’t allow chapters, so a different class has to be set with <code>--variable documentclass=report</code>.</p>
<h2 id="summary">Summary</h2>
<p>For completeness, here is the full pandoc command used to generate the PDF:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1"></a><span class="ex">pandoc</span> \</span>
<span id="cb8-2"><a href="#cb8-2"></a>  --toc \</span>
<span id="cb8-3"><a href="#cb8-3"></a>  --toc-depth=2 \</span>
<span id="cb8-4"><a href="#cb8-4"></a>  --metadata=documentclass=report \</span>
<span id="cb8-5"><a href="#cb8-5"></a>  --pdf-engine=xelatex \</span>
<span id="cb8-6"><a href="#cb8-6"></a>  --lua-filter=lua-manual-cleanup.lua \</span>
<span id="cb8-7"><a href="#cb8-7"></a>  --number-sections \</span>
<span id="cb8-8"><a href="#cb8-8"></a>  --top-level-division=chapter \</span>
<span id="cb8-9"><a href="#cb8-9"></a>  --output=lua-5.4-manual.pdf \</span>
<span id="cb8-10"><a href="#cb8-10"></a>  <span class="st">&quot;https://lua.org/manual/5.4/manual.html&quot;</span></span></code></pre></div>
<p>One of the big advantages of pandoc is that it offers a lot of freedom. Since we already cleaned the content up, we can now also create other formats, like an ebook, just by changing the name of the output file. The final results are available below:</p>
<ul>
<li><a href="/docs/lua-5.4-manual.pdf">Lua 5.4 manual (PDF)</a></li>
<li><a href="/docs/lua-5.4-manual.epub">Lua 5.4 manual (EPUB)</a></li>
</ul>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>Extending pandoc with Lua</title>
    <link href="https://zeitkraut.de/posts/2017-12-23-extending-pandoc-with-lua.html" />
    <id>https://zeitkraut.de/posts/2017-12-23-extending-pandoc-with-lua.html</id>
    <published>2017-12-23T00:00:00Z</published>
    <updated>2017-12-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">Extending pandoc with Lua</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2017-12-23" property="datePublished">December 23, 2017</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;pandoc&#39;." href="/tags/pandoc.html">pandoc</a>, <a title="All pages tagged &#39;lua&#39;." href="/tags/lua.html">lua</a>, <a title="All pages tagged &#39;pandoc-filter&#39;." href="/tags/pandoc-filter.html">pandoc-filter</a></div>
  </div>

  <div property="articleBody">
    <p>My first exposure to Lua has been as a pandoc user, and adding new Lua features to pandoc turned Lua into one of my favorite languages. In this post I will take a look at <a href="https://pandoc.org/">pandoc</a>, the universal document converter, and explore how one can script and extend it with Lua. Pandoc includes a Lua interpreter since 2012, but the integration of Lua has been expanded significantly with the latest 2.0 release. My hope for this article is to highlight the beauty of these systems.</p>
<h2 id="the-universal-document-converter">The universal document converter</h2>
<p><a href="https://pandoc.org/">Pandoc</a> – written and maintained by <a href="https://johnmacfarlane.net">John MacFarlane</a> – is an relatively old project. It has grown considerably since the first version was published in 2006: at the time of writing, pandoc can read 27 different document formats and dialects, and can write 49 formats. Besides serving as a one-off document conversions tool, pandoc also frequently features as the central part of publishing pipelines. For example, Pandoc is used in <a href="https://github.com/mfenner/jekyll-pandoc">static</a> <a href="https://jaspervdj.be/hakyll/">site generators</a> and is frequently used <a href="https://programminghistorian.org/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown">by academic writers</a>, due also to its excellent support for citations.</p>
<p>As a brief example, consider the following commands which transform Markdown input into docx, HTML, or PDF:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># command to convert a markdown file to docx</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="ex">pandoc</span> input-file.md --output=output-file.docx</span>
<span id="cb1-3"><a href="#cb1-3"></a></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="co"># convert to HTML</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="ex">pandoc</span> input-file.md --standalone --output=output-file.html</span>
<span id="cb1-6"><a href="#cb1-6"></a></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="co"># convert to PDF (via LaTeX)</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="ex">pandoc</span> input-file.md --output=output-file.pdf</span></code></pre></div>
<p>Many conversion tasks need to alter the default behavior or require special conversion features. This highlights the importance of good customization support for a conversion tool, one of the areas in which Lua shines.</p>
<p>Pandoc is unusual for a Lua-extendable program, in that it is written in Haskell. Using Haskell is very productive, but is less suitable as an extension language: its concepts are often alien to users of other languages, and shipping a full Haskell interpreter with pandoc would result in considerable bloat. Lua is an excellent choice here, as it is lightweight, simple, and beautiful. It should be noted, however, that <a href="https://github.com/hslua">bridging Haskell and Lua</a> is its own can of worms and worth a separate blog post.</p>
<h2 id="pandocs-document-ast">Pandoc’s document AST</h2>
<p>An important factor in pandoc’s immense transformation powers is its use of a unifying document representation: Every input is parsed into this document AST, which is then rendered in the desired output format. While a direct conversion between any of <em>n</em> input and <em>m</em> output formats would require <em>n </em> m* converters, using an intermediate representation reduces complexity to <em>n + m</em>.</p>
<p>There are additional advantages to this: as we’ll see, it becomes much simpler to work with a unified document representation than it would be to work with any of the input or output formats directly.</p>
<p>There are four main types in pandoc’s document model: inlines, blocks, document metadata, and the full document.</p>
<ul>
<li><p>Inline elements represent text and text markup. Examples are <em>Space</em> for inter-word spaces, <em>Str</em> for (usually non-whitespace) text, and <em>Emph</em> for emphasized text.</p></li>
<li><p>Blocks are elements like paragraphs, lists, code listings, and headers. They are usually rendered in lines or blocks of their own; many block elements contain lists of inline elements.</p></li>
<li><p>Meta information is a simple mapping from string keys to meta values. Meta values can be thought of as a special JSON or YAML object.</p></li>
<li><p>Last but not least, the <em>Pandoc</em> type represents a full document. A <em>Pandoc</em> element consists of a lists of block elements, plus additional document metadata.</p></li>
</ul>
<p>Pandoc’s Lua features revolve around modifying or converting these elements. The oldest use of Lua in pandoc enables the conversion of AST elements into strings as to output any document format.</p>
<h2 id="custom-writers">Custom writers</h2>
<p>Users can define custom writers in Lua to render any document format. Each of the aforementioned AST elements is transformed to a string by calling a Lua function of the same name as the element. E.g., this example demonstrates how emphasized text can be rendered as HTML:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">function</span> Emph<span class="op">(</span>content_string<span class="op">)</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>  <span class="cf">return</span> <span class="st">&#39;&lt;em&gt;&#39;</span> <span class="op">..</span> content_string <span class="op">..</span> <span class="st">&#39;&lt;/em&gt;&#39;</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="cf">end</span></span></code></pre></div>
<p>A full custom writer is defined by specifying functions for all document AST elements. Example writers using this method include <a href="https://github.com/lilydjwg/2bbcode">2bbcode</a> by <a href="https://github.com/lilydjwg">@lilydjwg (依 云)</a>, as well as pandoc’s <code>sample.lua</code>. The latter is a well documented starting point for authors of new custom writers. The file can be produced by calling <code>pandoc --print-default-data-file=sample.lua</code>.</p>
<p>The <a href="https://pandoc-scholar.github.io/">pandoc-scholar</a> project serves as an example for the power offered by custom writers. It is a publishing tool intended to <a href="https://doi.org/10.7717/peerj-cs.112">help authors of scholarly articles</a> and was created with custom Lua writers. The tool leans on the custom writers feature in ways that writers were not intended to be used, which resulted in the development of lua filters.</p>
<h2 id="filters">Filters</h2>
<p>An additional benefit of a unified document type is that the document can be modified programmatically, regardless of which input and output format is chosen. Pandoc provides two interfaces for this.</p>
<h3 id="json-filters">JSON Filters</h3>
<p>The first – very flexible – method is based on JSON. Pandoc can serialize the document to JSON; other programs <a href="https://pandoc.org/filters.html">can read and modify</a> the document. The resulting document JSON is passed back to pandoc, thus allowing users to use any programming language capable of parsing JSON to alter the document. Many libraries for various languages have been implemented, including <a href="https://hackage.haskell.org/package/pandoc-types">Haskell</a>, <a href="http://scorreia.com/software/panflute/">Python</a>, <a href="https://heerdebeer.org/Software/markdown/paru/">Ruby</a>, and <a href="https://www.npmjs.com/package/pandoc-filter">JavaScript</a>.</p>
<p>The flexibility of JSON filters can also be a disadvantage, as it requires additional software and usually the full installation of a scripting language’s ecosystem. Pandoc is designed to work on all major platforms and without any dependencies on other libraries and binaries. Depending on additional software can be problematic, especially for non-technical users.</p>
<h3 id="lua-filters">Lua filters</h3>
<p>The <a href="https://pandoc.org/lua-filters.html">Lua filter</a> system added in pandoc 2.0 not only solves the portability issue of JSON filters, but also offers better performance and more functionality. Document elements can be selectively serialized to Lua tables, modified using the full power of Lua, and will then be transferred back, thus replacing the previous values.</p>
<p>Lua filters operate by calling filter functions on each element of the specified name. I.e., if a Lua filter contains a function with the same name as an AST element, then this function is called for all elements of the respective type. The serialized element is passed as input to the filter function, and the function’s return value is deserialized and used to replace the input element. This method is as simple as it is flexible, and fits well with the concept of immutability which is prevalent in Haskell programs: pandoc ignores modifications to the serialized object itself, it will just use the filter function’s return value.</p>
<p>The following example filter transforms all text set in small caps into emphasized text:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">function</span> SmallCaps <span class="op">(</span>element<span class="op">)</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>  <span class="cf">return</span> pandoc<span class="op">.</span>Emph<span class="op">(</span>element<span class="op">.</span>content<span class="op">)</span></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="cf">end</span></span></code></pre></div>
<p>The element constructor functions in module pandoc, like <code>pandoc.Emph</code> in the above example, are also the central step when transforming elements from their pandoc-internal representation to Lua values. This ensures consistency in the way element values are produced, whether during serialization or through a constructor call in the filter script. The current implementation uses only strings, tables, and some metatables when constructing element values, with the goal of marking these values easy and flexible to use.</p>
<h2 id="lua-filter-example-macro-expander">Lua filter example: macro expander</h2>
<p>Below is the code for a simple macro expander using pandoc’s Lua filter functionality. The expander replaces all macro occurrences in the given document. Macro definitions are hard-coded into the filter, but could as well be read from an external file.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">-- file: macro-expander.lua</span></span>
<span id="cb4-2"><a href="#cb4-2"></a></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="co">-- Macro substitutions: contains macro identifier as</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="co">-- keys and the expanded inlines as values.</span></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">local</span> macro_substs <span class="op">=</span> <span class="op">{</span></span>
<span id="cb4-6"><a href="#cb4-6"></a>  <span class="op">[</span><span class="st">&#39;{{hello}}&#39;</span><span class="op">]</span> <span class="op">=</span> pandoc<span class="op">.</span>Emph<span class="op">{</span>pandoc<span class="op">.</span>Str <span class="st">&quot;Hello, World!&quot;</span><span class="op">}</span></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="op">}</span></span>
<span id="cb4-8"><a href="#cb4-8"></a></span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="co">-- Replace string with macro expansion, if any.</span></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="kw">function</span> Str <span class="op">(</span>s<span class="op">)</span></span>
<span id="cb4-11"><a href="#cb4-11"></a>  <span class="cf">return</span> macro_substs<span class="op">[</span>s<span class="op">.</span>text<span class="op">]</span> <span class="kw">or</span> s</span>
<span id="cb4-12"><a href="#cb4-12"></a><span class="cf">end</span></span></code></pre></div>
<p>The heart of the macro expander is the function <code>Str</code>. It is called on all simple strings in the document. The return value of this function is then read back into pandoc, replacing the original <code>Str</code> value.</p>
<p>Assume a Markdown file <code>greeting.md</code>:</p>
<pre><code>Greeting: {{hello}}</code></pre>
<p>We can apply the macro expander by calling</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1"></a><span class="ex">pandoc</span> --lua-filter macro-expander.lua greeting.md</span></code></pre></div>
<p>resulting in the expected expansion:</p>
<blockquote>
<p>
Greeting: <em>Hello, World!</em>
</p>
</blockquote>
<p>The function <code>Str</code> could be shortened further by dropping the trailing <code>or s</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">function</span> Str <span class="op">(</span>s<span class="op">)</span> <span class="cf">return</span> macro_substs<span class="op">[</span>s<span class="op">.</span>text<span class="op">]</span> <span class="cf">end</span></span></code></pre></div>
<p>This is a convenience feature of pandoc filters: if the function returns no value (or <code>nil</code>), the original value is kept unchanged. This makes filter functions easier to write and speeds up filtering, as unchanged elements don’t need to be deserialized again.</p>
<h2 id="whats-good-and-whats-next">What’s good, and what’s next</h2>
<p>Using pandoc with Lua is a fast, flexible, and platform independent way of augmenting pandoc with additional functionality. For me personally, having the full power of Lua at ones finger tips proved to be a lot of fun, while opening unexpected document processing possibilities.</p>
<p>Pandoc and its Lua subsystem are under constant development. E.g., the next versions will feature more utility functions exposed via Lua modules. There is constant work to make more and more internal functions available. The next big goal is to grant scripting access to all format-output functions. However, this requires some changes to pandoc’s internals. It remains a long way for pandoc to become a fully Lua-scriptable publishing platform.</p>
<p>If you want to learn more about Lua filters, the <a href="https://pandoc.org/lua-filters.html">Lua filter docs</a> is a good place to start. It includes up-to-date examples of Lua scripts, as well as a reference of all modules and functions accessible via Lua. Pandoc’s <a href="https://pandoc.org/MANUAL.html">user manual</a> is a good resource to learn about all of pandoc features and its command line options.</p>
<p><a href="https://groups.google.com/forum/#!forum/pandoc-discuss">Feedback</a> is always welcome!</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>A big thank you to Jennifer König, Birgit Pohl, and John MacFarlane for their feedback on an earlier version of this post, and to all pandoc contributors and users, who make working on this project incredibly fun.</p>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>MetaNook2014 – Command Line Talk</title>
    <link href="https://zeitkraut.de/posts/2014-11-22-nook-2014.html" />
    <id>https://zeitkraut.de/posts/2014-11-22-nook-2014.html</id>
    <published>2014-11-22T00:00:00Z</published>
    <updated>2014-11-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">MetaNook2014 – Command Line Talk</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2014-11-22" property="datePublished">November 22, 2014</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;talk&#39;." href="/tags/talk.html">talk</a>, <a title="All pages tagged &#39;shell&#39;." href="/tags/shell.html">shell</a>, <a title="All pages tagged &#39;command-line&#39;." href="/tags/command-line.html">command-line</a>, <a title="All pages tagged &#39;metanook&#39;." href="/tags/metanook.html">metanook</a></div>
  </div>

  <div property="articleBody">
    <p>Last night was the night of this year’s MetaNook. It was the fourth time that the local hackers, most notably <a href="https://metameute.de">MetaMeute</a> and <a href="https://chaotikum.org">Chaotikum</a>, joined forces to organize a night full of beginner-friendly introductions, advanced tech talks, and project presentations.</p>
<p>My <a href="https://github.com/tarleb/shell-talk">talk contribution</a> this year was a brief introduction in the “magic” of the command-line. The talk slides are adapted to the topic in that the presentation must be given from the command line. Each slide is just a function, the whole presentation environment is held together by scripts and other shell-equivalences of duckt-tape. Feedback from the thirty or-so attendees was mostly positive.</p>
<p>It was a very fun experience over all, as usual.</p>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>rt6_redirect: source isn't a valid nexthop for redirect target</title>
    <link href="https://zeitkraut.de/posts/2014-08-01-rt6_redirect.html" />
    <id>https://zeitkraut.de/posts/2014-08-01-rt6_redirect.html</id>
    <published>2014-08-01T00:00:00Z</published>
    <updated>2014-08-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">rt6_redirect: source isn't a valid nexthop for redirect target</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2014-08-01" property="datePublished">August  1, 2014</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;security&#39;." href="/tags/security.html">security</a>, <a title="All pages tagged &#39;ipv6&#39;." href="/tags/ipv6.html">ipv6</a>, <a title="All pages tagged &#39;server&#39;." href="/tags/server.html">server</a></div>
  </div>

  <div property="articleBody">
    <p>The zeitkraut server is configured to work with IPv6. For quite some time now, I’ve been seeing some strange errors in my log files. If you’ve been noticing something similar, here is what’s going on and how to prevent the messages from appearing.</p>
<h2 id="the-problem">The Problem</h2>
<p>Everything works as expected, except for some weird messages in the logs:</p>
<pre><code>rt6_redirect: source isn&#39;t a valid nexthop for redirect target</code></pre>
<p>Not even <a href="https://startpage.com">startpage</a> was of much help. Searching for the above line only lists only some <a href="http://ubuntuforums.org/archive/index.php/t-1947743.html">unanswered</a> <a href="http://board.gulli.com/thread/1699675-rt6-redirect-source-isn-t-a-valid-nexthop/">forum</a> questions and the kernel source code which is producing the message. Oh, and a somewhat unhelpful blog entry <a href="https://www.kernel-error.de/kernel-error-blog/189-rt6-redirect-source-isn-t-a-valid-nexthop-for-redirect-target">telling</a> people to always use their routers link local address when routing. This is useless advice in my case, I don’t <em>have</em> a link-local address of the router, only it’s global address.</p>
<h2 id="the-cause">The Cause</h2>
<p>I found a way to stop the message from appearing in my logs. On the way, I learned a bit more about IPv6 and improved server security on the way.</p>
<p>IPv6 contains functionality to tell a computer about better routes to the target destination. A router may send ICMPv6 redirect packages (type 137 to be specific), informing neighboring computers about more effective ways to reach their targets. This makes the most sense when applied within an environment heavily relying on auto-configuration – like a dynamic internal company or home network. It makes a lot less sense for servers very stable network topologies.</p>
<p>Attackers may try to exploit the redirect functionality by including themselves into the route to the target. The specification for those redirects includes some security-measures, requiring the attacker to correctly guess the server’s current next hop. If the attackers get it wrong, the Linux kernel refuses to use the new routing information. This is most-likely what happens when you see the above log messages.</p>
<h2 id="the-solution">The Solution</h2>
<p>Long talk short, the solution is to disable IPv6 redirecting:</p>
<pre><code>sudo sysctl net.ipv6.conf.all.accept_redirects=0</code></pre>
<p>My server is not a router, so there is no need to accept any kind of route changing messages from external sources. We can simply disable redirects, using above command. The change can be made permanent by setting the value in <code>/etc/sysctl.conf</code>. In fact, we can disable routing for both IPv4 and IPv6. Be careful though, you might happen to be in a network environment requiring you to accept redirect commands for some reason.</p>
<p>If you are on Debian or similar distribution like Ubuntu, change the following lines in <code>/etc/sysctl.conf</code> from</p>
<pre><code># Do not accept ICMP redirects (prevent MITM attacks)
#net.ipv4.conf.all.accept_redirects = 0
#net.ipv6.conf.all.accept_redirects = 0
# _or_
# Accept ICMP redirects only for gateways listed in our default
# gateway list (enabled by default)
# net.ipv4.conf.all.secure_redirects = 1
#
# Do not send ICMP redirects (we are not a router)
#net.ipv4.conf.all.send_redirects = 0
#
# Do not accept IP source route packets (we are not a router)
#net.ipv4.conf.all.accept_source_route = 0
#net.ipv6.conf.all.accept_source_route = 0</code></pre>
<p>to</p>
<pre><code># Do not accept ICMP redirects (prevent MITM attacks)
net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
#
# Do not send ICMP redirects (we are not a router)
net.ipv4.conf.all.send_redirects = 0
#
# Do not accept IP source route packets (we are not a router)
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0</code></pre>
<p>Running <code>sudo sysctl -p</code> loads the new settings.</p>
<h2 id="alternative-solution">Alternative Solution</h2>
<p>Completely disabling redirects in the kernel should keep you reasonably secure. However, if you need redirects within your internal network, you could also block redirect packages reaching you through external interfaces. E.g., to block redirect packages coming in on eth1, one would issue</p>
<pre><code>sudo ip6tables -A -i eth1 -p icmpv6 --icmpv6-type 137 -j DROP</code></pre>
<p>However, firewall configuration is a complex topic, so I’m not going to go into details here.</p>
<p>If you have any questions, corrections or comments on the matter, please drop me a line.</p>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>How Firefox leaks visited sites</title>
    <link href="https://zeitkraut.de/posts/2014-07-21-firefox-leaks-visited-sites.html" />
    <id>https://zeitkraut.de/posts/2014-07-21-firefox-leaks-visited-sites.html</id>
    <published>2014-07-21T00:00:00Z</published>
    <updated>2014-07-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">How Firefox leaks visited sites</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2014-07-21" property="datePublished">July 21, 2014</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;browsers&#39;." href="/tags/browsers.html">browsers</a>, <a title="All pages tagged &#39;privacy&#39;." href="/tags/privacy.html">privacy</a>, <a title="All pages tagged &#39;security&#39;." href="/tags/security.html">security</a></div>
  </div>

  <div property="articleBody">
    <p>I consider Firefox to be a rather secure and reliable browser with reasonable security and privacy setting. I was rather horrified when I found out that it sends the name of visited domains to other servers around the world. Here is why it does it, and what you can do about it.</p>
<h2 id="the-online-certificate-status-protocol-ocsp">The Online Certificate Status Protocol (%OCSP)</h2>
<p>The information Firefox sends relates to <a href="https://en.wikipedia.org/wiki/OCSP">OCSP</a>, a protocol used to ensure the validity of an SSL certificate. Certificates which have been compromised or need to be revoked for other reasons, should no longer be accepted by the browser. When the <a href="https://heartbleed.com">heartbleed bug</a> became public, it became even more obvious why a mechanism is required to keep the web (somewhat) secure. %OCSP is one such mechanism, but in it’s current state, it’s terrible.</p>
<p>The way %OCSP works in Firefox is that upon visiting an encrypted website, the browser sends a request to the <a href="https://en.wikipedia.org/wiki/Certificate Authority">%CA</a> which signed the website’s certificate. The %CA will then answer with a report on the certificate’s revokation status, thereby noting the user in cases where the certificate, and hence the connection with the website, should not be trusted anymore.</p>
<p>Unfortunately, the whole method doesn’t actually add security but instead creates new privacy problems.</p>
<h2 id="privacy-implications">Privacy implications</h2>
<p>When the browser checks a certificate’s validity via %OCSP, it notifies a third party (the %CA) about which website the user is accessing and when he is doing it. This can mean that when you access your mail provider homepage or your favorite local news site over https, a request will be send to a server, possibly on the other side of the world, to tell that server about your action. Such information should be none of the %CA’s business, but Firefox happily sends it nonetheless.</p>
<p>What makes the story even worse is the fact that this method doesn’t even add any security. Adam Langley explains it better than I could, so if you are interested in the topic, you should read his <a href="https://imperialviolet.org/2014/04/19/revchecking.html">explanation</a> on why %OCSP is basically <a href="https://en.wikipedia.org/wiki/snake oil">snake oil</a> and fails in making the web more secure.</p>
<h2 id="plugging-the-hole">Plugging the hole</h2>
<p>Alternative methods like <a href="https://en.wikipedia.org/wiki/OCSP%20Stapling">OCSP stapling</a> and <a href="https://en.wikipedia.org/wiki/CRL">CRL</a> exist and don’t suffer from those problems, so there is no need to keep %OCSP activated in the browser. Chrome has it disabled by default; you can disable it in Firefox by following these brief instructions:</p>
<ul>
<li>Open a new tab in Firefox and visit the URL <a href="about:config">about:config</a>.</li>
<li>Click the <em>I’ll be careful, I promise</em> button.</li>
<li>Enter <code>OCSP</code> into the search/filter field.</li>
<li>Double click on <code>security.OCSP.enabled</code> and set its value to <code>0</code>.</li>
</ul>
<p>Done. You just stoped Firefox from needlessly leaking private browsing information to other parties. Happy browsing!</p>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>How to configure zsh with vi bindings and nice shortcuts</title>
    <link href="https://zeitkraut.de/posts/2014-06-29-howto-zsh-vi-style.html" />
    <id>https://zeitkraut.de/posts/2014-06-29-howto-zsh-vi-style.html</id>
    <published>2014-06-29T00:00:00Z</published>
    <updated>2014-06-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">How to configure zsh with vi bindings and nice shortcuts</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2014-06-29" property="datePublished">June 29, 2014</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;zsh&#39;." href="/tags/zsh.html">zsh</a>, <a title="All pages tagged &#39;vi&#39;." href="/tags/vi.html">vi</a>, <a title="All pages tagged &#39;prompt&#39;." href="/tags/prompt.html">prompt</a>, <a title="All pages tagged &#39;key bindings&#39;." href="/tags/key%20bindings.html">key bindings</a>, <a title="All pages tagged &#39;customization&#39;." href="/tags/customization.html">customization</a></div>
  </div>

  <div property="articleBody">
    <p>Having a good working environment is vital for feeling comfortable being productive. This extends to computational tools and the <a href="https://en.wikipedia.org/wiki/command shell">command shell</a> is an integral part of the daily work for many of us. It’s a good idea to configure the shell’s interface to be efficient and pleasant to use. Here we see how <code>zsh</code>, arguably the best shell around, can be configured to suit the needs of people used to vi key bindings (which are arguably arguably superior and more ergonomical than the default emacs-style bindings)<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<h2 id="using-vi-bindings-in-the-shell">Using vi-bindings in the shell</h2>
<p>The first step towards nice vi key bindings is almost too easy: The red pill takes the form of</p>
<div class="sourceCode" id="cb1" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="ex">bindkey</span> -v</span></code></pre></div>
<p>Type it into your prompt (and add it to your <code>.zshrc</code> file) and emacs bindings are going bye-bye. <code>Escape</code> will bring you to normal-mode, while <code>i</code>, <code>a</code>, <code>o</code> etc. will bring you back to insert-mode, just as with your favorite editor. Use <code>j</code> and <code>k</code> in normal-mode to go through your history and move around within the line with <code>h</code>, <code>l</code>, <code>w</code>, <code>b</code> and the like.</p>
<p>This is a good start, let’s see how we can bring it from “this is nice” to “that’s just awesome”.</p>
<p>First, we may want to keep some of the default key bindings in insert-mode since we’ve grown accustomed to them. No missing out, let’s put them back in:</p>
<div class="sourceCode" id="cb2" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># Kill input from the current point to the end of line with Ctrl-k</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="ex">bindkey</span> <span class="st">&#39;^k&#39;</span> kill-line</span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="co"># Search the history incremantally with Ctrl-r</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="ex">bindkey</span> <span class="st">&#39;^r&#39;</span> history-incremental-search-backward</span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="co"># Insert and go through the &quot;last words&quot; of previous commands with Meta-.</span></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="co"># (or Escape-. for that matter).</span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="ex">bindkey</span> <span class="st">&#39;^[.&#39;</span> insert-last-word</span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="co"># Show the man-page or other helpful infos with Meta-h</span></span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="ex">bindkey</span> <span class="st">&#39;^[h&#39;</span> run-help</span></code></pre></div>
<p>You can take a look at the key bindings defined for emacs-mode by typing <code>bindkey -M emacs -L</code> and reuse the bindings you like. See the <code>zshzle</code> manpage for more pre-defined widgets for which you could define bindings.</p>
<h2 id="configuring-the-prompt-to-show-the-current-editing-mode">Configuring the prompt to show the current editing mode</h2>
<p>So the key bindings are quite usable now, but it’s a bit unfortunate that it is impossible to see if the shell is in insert- or normal-mode. There should be a mode indicator right in the shell prompt!</p>
<div class="sourceCode" id="cb3" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1"></a><span class="co"># You may already have those in your .zshrc somewhere</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="ex">autoload</span> -U promptinit <span class="kw">&amp;&amp;</span> <span class="ex">promptinit</span></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="ex">autoload</span> -U colors     <span class="kw">&amp;&amp;</span> <span class="ex">colors</span></span>
<span id="cb3-4"><a href="#cb3-4"></a></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="ex">setopt</span> prompt_subst</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="co"># Set the colors to your liking</span></span>
<span id="cb3-8"><a href="#cb3-8"></a><span class="bu">local</span> <span class="va">vi_normal_marker=</span><span class="st">&quot;[%{</span><span class="va">$fg[green]</span><span class="st">%}%BN%b%{</span><span class="va">$reset_color</span><span class="st">%}]&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9"></a><span class="bu">local</span> <span class="va">vi_insert_marker=</span><span class="st">&quot;[%{</span><span class="va">$fg[cyan]</span><span class="st">%}%BI%b%{</span><span class="va">$reset_color</span><span class="st">%}]&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10"></a><span class="bu">local</span> <span class="va">vi_unknown_marker=</span><span class="st">&quot;[%{</span><span class="va">$fg[red]</span><span class="st">%}%BU%b%{</span><span class="va">$reset_color</span><span class="st">%}]&quot;</span></span>
<span id="cb3-11"><a href="#cb3-11"></a><span class="bu">local</span> <span class="va">vi_mode=</span><span class="st">&quot;</span><span class="va">$vi_insert_marker</span><span class="st">&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12"></a><span class="fu">vi_mode_indicator ()</span> <span class="kw">{</span></span>
<span id="cb3-13"><a href="#cb3-13"></a>  <span class="kw">case</span> <span class="va">${KEYMAP}</span><span class="kw"> in</span></span>
<span id="cb3-14"><a href="#cb3-14"></a>    <span class="kw">(</span>vicmd<span class="kw">)</span>      <span class="bu">echo</span> <span class="va">$vi_normal_marker</span> <span class="kw">;;</span></span>
<span id="cb3-15"><a href="#cb3-15"></a>    <span class="kw">(</span><span class="ex">main</span><span class="kw">|</span><span class="ex">viins</span><span class="kw">)</span> <span class="bu">echo</span> <span class="va">$vi_insert_marker</span> <span class="kw">;;</span></span>
<span id="cb3-16"><a href="#cb3-16"></a>    <span class="kw">(</span><span class="ex">*</span><span class="kw">)</span>          <span class="bu">echo</span> <span class="va">$vi_unknown_marker</span> <span class="kw">;;</span></span>
<span id="cb3-17"><a href="#cb3-17"></a>  <span class="kw">esac</span></span>
<span id="cb3-18"><a href="#cb3-18"></a><span class="kw">}</span></span>
<span id="cb3-19"><a href="#cb3-19"></a></span>
<span id="cb3-20"><a href="#cb3-20"></a><span class="co"># Reset mode-marker and prompt whenever the keymap changes</span></span>
<span id="cb3-21"><a href="#cb3-21"></a><span class="kw">function</span><span class="fu"> zle-line-init</span> <span class="ex">zle-keymap-select</span> {</span>
<span id="cb3-22"><a href="#cb3-22"></a>  <span class="va">vi_mode=</span><span class="st">&quot;</span><span class="va">$(</span><span class="ex">vi_mode_indicator</span><span class="va">)</span><span class="st">&quot;</span></span>
<span id="cb3-23"><a href="#cb3-23"></a>  <span class="ex">zle</span> reset-prompt</span>
<span id="cb3-24"><a href="#cb3-24"></a>}</span>
<span id="cb3-25"><a href="#cb3-25"></a><span class="ex">zle</span> -N zle-line-init</span>
<span id="cb3-26"><a href="#cb3-26"></a><span class="ex">zle</span> -N zle-keymap-select</span>
<span id="cb3-27"><a href="#cb3-27"></a></span>
<span id="cb3-28"><a href="#cb3-28"></a><span class="co"># Multiline-prompts don&#39;t quite work with reset-prompt; we work around this by</span></span>
<span id="cb3-29"><a href="#cb3-29"></a><span class="co"># printing the first line(s) via a precmd which is executed before the prompt</span></span>
<span id="cb3-30"><a href="#cb3-30"></a><span class="co"># is printed.  The following can be integrated into PROMPT for single-line</span></span>
<span id="cb3-31"><a href="#cb3-31"></a><span class="co"># prompts.</span></span>
<span id="cb3-32"><a href="#cb3-32"></a><span class="co">#</span></span>
<span id="cb3-33"><a href="#cb3-33"></a><span class="co"># Colorize freely</span></span>
<span id="cb3-34"><a href="#cb3-34"></a><span class="bu">local</span> <span class="va">user_host=</span><span class="st">&#39;%B%n%b@%m&#39;</span></span>
<span id="cb3-35"><a href="#cb3-35"></a><span class="bu">local</span> <span class="va">current_dir=</span><span class="st">&#39;%~&#39;</span></span>
<span id="cb3-36"><a href="#cb3-36"></a><span class="fu">precmd ()</span> <span class="ex">print</span> -rP <span class="st">&quot;</span><span class="va">${user_host}</span><span class="st"> </span><span class="va">${current_dir}</span><span class="st">&quot;</span></span>
<span id="cb3-37"><a href="#cb3-37"></a></span>
<span id="cb3-38"><a href="#cb3-38"></a><span class="bu">local</span> <span class="va">return_code=</span><span class="st">&quot;%(?..%{</span><span class="va">$fg[red]</span><span class="st">%}%? %{</span><span class="va">$reset_color</span><span class="st">%})&quot;</span></span>
<span id="cb3-39"><a href="#cb3-39"></a><span class="va">PROMPT=</span><span class="st">&#39;${return_code}${vi_mode} %# &#39;</span></span></code></pre></div>
<p>This gives a prompt in the style of</p>
<pre><code>user@host /current/working/path
[I] %
</code></pre>
<p>where <code>[I]</code> is the insert-mode indicator and is changed to <code>[N]</code> when normal-mode is activated. Neat, isn’t it?</p>
<h2 id="single--and-multi-key-shortcuts">Single- and multi-key shortcuts</h2>
<p>This is all nice and dandy, but it’s not quite like vim yet. How about those sweet bindings where pressing <code>jj</code> in quick succession brings us to normal-mode without having to press <code>Esc</code>? Setting it up is easy as pie.</p>
<div class="sourceCode" id="cb5" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1"></a><span class="co"># Time in which two keys have to be pressed in order to be recognized as a</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="co"># single command (in centiseconds, set to 0.4 sec by default -- may be</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="co"># modified as needed).</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="bu">export</span> <span class="va">KEYTIMEOUT=</span>40</span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="ex">bindkey</span> <span class="st">&#39;jj&#39;</span> vi-cmd-mode</span></code></pre></div>
<p>We can also add two-key bindings to jump to the start and end of the line:</p>
<div class="sourceCode" id="cb6" data-org-language="sh"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1"></a><span class="co"># Bind to both possible orders in which the keys could be pressed.</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="co"># Move all the way to the left</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="ex">bindkey</span> <span class="st">&#39;;l&#39;</span> end-of-line</span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="ex">bindkey</span> <span class="st">&#39;l;&#39;</span> end-of-line</span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="co"># Move all the way to the right</span></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="ex">bindkey</span> <span class="st">&#39;;h&#39;</span> beginning-of-line</span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="ex">bindkey</span> <span class="st">&#39;h;&#39;</span> beginning-of-line</span></code></pre></div>
<p>Jumping to the beginning of the line is now as easy as pressing <code>;</code> and <code>h</code> at the same time. No need to switch to normal-mode and your fingers don’t leave the your keyboard’s home-row. Try it, it’s great!</p>
<h2 id="more">More</h2>
<p>Customizations like this can make it much more pleasant to use the command line and boost your productivity. If the above is still not enough, here are some more ideas:</p>
<ul>
<li>Define custom keymaps, e.g. to control other programs such as <code>mpc</code> or <code>tmux</code>.</li>
<li>Switch to said keymaps via some nice bindings.</li>
<li>Show the status of version control systems and build environments in the prompt.</li>
</ul>
<p>If you don’t feel like doing all the work yourself, I can heartly reommend you take a look at <a href="http://ohmyz.sh">oh-my-zsh</a>. It offers a great collection of ideas to build on and some really cool ready-to-use plugins. Have fun!</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Emacs is a great program which I’ve been using for years and continue to use daily, but vi bindings just make good things better. Thanks to <a href="https://gitorious.org/evil/pages/Home">evil,</a> that’s not a problem.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>Pandoc 1.12.4 Released</title>
    <link href="https://zeitkraut.de/posts/2014-05-09-pandoc-1.12.4.html" />
    <id>https://zeitkraut.de/posts/2014-05-09-pandoc-1.12.4.html</id>
    <published>2014-05-09T00:00:00Z</published>
    <updated>2014-05-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">Pandoc 1.12.4 Released</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2014-05-09" property="datePublished">May  9, 2014</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html">haskell</a>, <a title="All pages tagged &#39;pandoc&#39;." href="/tags/pandoc.html">pandoc</a>, <a title="All pages tagged &#39;org-mode&#39;." href="/tags/org-mode.html">org-mode</a></div>
  </div>

  <div property="articleBody">
    <p>Yesterday, John MacFarlane released a new version of <code>pandoc</code>, the universal document converter. This means that my Emacs org-mode reader is now available to everyone. I’m very curious to see if people actually use the new reader (and if I have to deal with a lot of bugs and/or feature requests in the near future).</p>
<p>I can’t state enough just how great <code>pandoc</code> is as a tool and library. The code is very clean, well documented and extending it is (almost ridiculously) easy. And as for the usefulness: Hakyll, the software used for this blog, is heavily building on <code>pandoc</code>. ’nough said.</p>
<p>So is <code>pandoc</code> really like a virus spreading Haskell, as <a href="https://github.com/jgm">jgm</a> recently <a href="https://github.com/jgm/pandoc/issues/1278#issuecomment-42502343">implicated</a>? All I know is that it most certainly got me infected. A new project of mine, <a href="https://github.com/tarleb/rundoc"><code>rundoc</code></a>, builds on <code>pandoc</code> and is (of course) written in Haskell. It looks like I’ll do most of my coding in it, for the foreseeable future.</p>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>Blogging with Hakyll and Emacs Org-mode</title>
    <link href="https://zeitkraut.de/posts/2014-02-28-emacs-org-mode.html" />
    <id>https://zeitkraut.de/posts/2014-02-28-emacs-org-mode.html</id>
    <published>2014-02-28T00:00:00Z</published>
    <updated>2014-02-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">Blogging with Hakyll and Emacs Org-mode</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2014-02-28" property="datePublished">February 28, 2014</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;hakyll&#39;." href="/tags/hakyll.html">hakyll</a>, <a title="All pages tagged &#39;pandoc&#39;." href="/tags/pandoc.html">pandoc</a>, <a title="All pages tagged &#39;emacs&#39;." href="/tags/emacs.html">emacs</a>, <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html">haskell</a></div>
  </div>

  <div property="articleBody">
    <p>I finally did it! I polished up my Haskell-fu and wrote a <a href="http://johnmacfarlane.net/pandoc">Pandoc</a> reader for <a href="http://orgmode.org">Emacs Org-mode</a>. As a result, I can now write blog posts in <code>Org-mode</code> instead of <code>Markdown</code>.</p>
<p>You can find the source code <del>on my github org branch</del> in Pandoc’s <a href="https://github.com/jgm/pandoc/blob/master/src/Text/Pandoc/Readers/Org.hs">main repo</a>.</p>
<h2 id="supported-features">Supported Features</h2>
<p>Not everything works the way it does in Emacs (yet), but support is sufficient for basic document parsing. Here is a short demonstration of currently supported features:</p>
<h3 id="headlines">Headlines</h3>
<ol>
<li><p>Another Headline</p>
<pre class="ORG"><code>*** Headlines

**** Another Headline
</code></pre></li>
</ol>
<h3 id="ordered-lists">Ordered Lists</h3>
<ol>
<li>First</li>
<li>Second</li>
<li>Third</li>
</ol>
<pre class="ORG"><code>1) First
2) Second
3) Third
</code></pre>
<h3 id="unorders-lists">Unorders Lists</h3>
<ul>
<li>Pandoc</li>
<li>Haskell</li>
<li>Emacs
<ul>
<li>Gnus</li>
<li>Org-Mode</li>
</ul></li>
</ul>
<pre class="ORG"><code>- Pandoc
- Haskell
- Emacs
  + Gnus
  + Org-Mode
</code></pre>
<h3 id="markup">Markup</h3>
<ul>
<li><em>emph</em></li>
<li><strong>strong</strong></li>
<li><strong><em>strong-emph</em></strong></li>
<li><code>code</code></li>
<li><del>strikeout</del></li>
<li>Sub- and Superscripts
<ul>
<li>2<sup>n</sup></li>
<li>2<sup>n-1</sup></li>
<li>a<sub>n</sub></li>
<li>a<sub>n+1</sub></li>
</ul></li>
</ul>
<pre class="ORG"><code>- /emph/
- *strong*
- */strong-emph/*
- =code=
- +strikeout+
- Sub- and Superscripts
  + 2^n
  + 2^{n-1}
  + a_n
  + a_{n+1}
</code></pre>
<h3 id="source-code">Source Code</h3>
<p>Muttering a greeting in Haskell:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-2"><a href="#cb5-2"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> greeting</span>
<span id="cb5-3"><a href="#cb5-3"></a>  <span class="kw">where</span> greeting <span class="ot">=</span> <span class="st">&quot;moin&quot;</span></span></code></pre></div>
<pre class="ORG"><code>#+BEGIN_SRC haskell
main :: IO ()
main = putStrLn greeting
  where greeting = &quot;moin&quot;
</code></pre>
<p>#+END<sub>SRC</sub></p>
<h3 id="table">Table</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Language</th>
<th style="text-align: left;">Typing</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Haskell</td>
<td style="text-align: left;">strong, static</td>
</tr>
<tr class="even">
<td style="text-align: left;">Common Lisp</td>
<td style="text-align: left;">strong, dynamic</td>
</tr>
<tr class="odd">
<td style="text-align: left;">JavaScript</td>
<td style="text-align: left;">weak, dynamic</td>
</tr>
</tbody>
</table>
<pre class="ORG"><code>| Language    | Typing          |
|-------------+-----------------|
| &lt;l&gt;         | &lt;l&gt;             |
| Haskell     | strong, static  |
| Common Lisp | strong, dynamic |
| JavaScript  | weak, dynamic   |
</code></pre>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>Protect the Reader’s Privacy!</title>
    <link href="https://zeitkraut.de/posts/2013-12-02-protect-the-readers-privacy.html" />
    <id>https://zeitkraut.de/posts/2013-12-02-protect-the-readers-privacy.html</id>
    <published>2013-12-02T00:00:00Z</published>
    <updated>2013-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">Protect the Reader’s Privacy!</h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2013-12-02" property="datePublished">December  2, 2013</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;privacy&#39;." href="/tags/privacy.html">privacy</a>, <a title="All pages tagged &#39;http&#39;." href="/tags/http.html">http</a></div>
  </div>

  <div property="articleBody">
    <p>I was faced with potential privacy issues while integrating Dave Gandy’s <a href="http://fontawesome.io">Font Awesome</a> into the page. The font itself is not to blame. On the contrary, the it is great! The methods by which it can be used, however, can be very problematic and open a channel for potential user tracking. This is not unique to this font but a very general problem.</p>
<p>The Font Awesome website <a href="http://fontawesome.io/get-started">lists multiple options</a> of how to integrate the font into a website, most of which are fairly simple. The first method is also praised as the “easiest”, yet I decided against it to protect the blog readers’ privacy. Here is why.</p>
<h2 id="foreign-vs.-local-content">Foreign vs. Local Content</h2>
<p>Most projects aimed at websites and web development offer a very simple way of using the technology: Including very short snippets of code is enough to bring a wide range of new functionality to an otherwise plain site. The principle here is that a foreign server handles the content. The page merely instructs the browser to get that content and to mix it with what is received from the original site.</p>
<p>As an example, this is the code which includes the popular <a href="http://jquery.com">jQuery</a> library into a page:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;text/javascript&quot;</span><span class="ot"> src=</span><span class="st">&quot;//code.jquery.com/jquery-1.10.2.min.js&quot;</span><span class="kw">&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">&lt;/script&gt;</span></span></code></pre></div>
<p>This instructs the browser to send a request to <code>code.jquery.com</code> and to receive the library file from there.</p>
<p>Contrast this with</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;text/javascript&quot;</span><span class="ot"> async=</span><span class="st">&quot;true&quot;</span><span class="ot"> src=</span><span class="st">&quot;/scripts/jquery.min.js&quot;</span><span class="kw">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">&lt;/script&gt;</span></span></code></pre></div>
<p>The latter HTML snippet causes no request to foreign servers but loads everything from the currently visited domain. The content must be put on the server, but that is hardly ever a problem with open source projects. This is also the setup I chose for Font Awesome and other libraries used on this site.</p>
<h2 id="information-disclosure">Information Disclosure</h2>
<p>The privacy problem arising from the former inclusion method is inherent to the way browsers communicate with servers. All browser requests are sent with the Hypertext Transfer Protocol, %HTTP for short. When an %HTTP conforming browser request goes out to a third-party server, that server learns about</p>
<ul>
<li>the address of the page which prompted the browser to initiate the request and</li>
<li>the users IP address, operating system, browser version and other potentially identifying information.</li>
</ul>
<p>In other words, the third-party is informed about the pages which are visited and how frequently users view them. The details of how much the third party really learns about a visitor depend on a number of variables, including the interest of the third party in user browsing-patterns. Privacy friendly third-party servers can stop a browser from making repeated requests for the same resource, thereby preventing the browser from disclosing more than the address of the first visited page. However, one address is always disclosed, regardless of server configuration.</p>
<p>It should be clear now that third-party website content poses a privacy risk to website visitors. Control over the disclosure of surfing habits and over another method for user-tracking is handed over to a third party. The website creator chooses in the name of all visitors which other pages they have to trust. The visitor has no choice in this.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<h2 id="responsibility-of-webmasters">Responsibility of Webmasters</h2>
<p>Including foreign content on a page is very common on the web, yet it is rarely ever necessary. Website operators are given the trust and data of their users. They should act responsibly and handle requests confidentially. Most importantly, they should not hand over user data to others. Setting foreign website content aside is one of the basic measures a webmaster should take to protect their users’ privacy.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p> Some commercial websites are well aware of the problem: The social news site <a href="http://reddit.com">reddit</a> offers a privacy related option to <q><em>“load core %JS libraries from reddit servers”</em></q>. It sets an example of how a website can give control in this matter back to the users. Unfortunately, the option became worthless when reddit decided to track its users with Google Analytics, eliminating all hopes for good privacy on that site. The JavaScript tracking code is loaded from Google’s servers regardless of whether the above option is set or not.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
  </div>
</article>
]]></summary>
</entry>
<entry>
    <title>Exploring HTTP Headers with <code>netcat</code></title>
    <link href="https://zeitkraut.de/posts/2013-11-05-exploring-http-headers.html" />
    <id>https://zeitkraut.de/posts/2013-11-05-exploring-http-headers.html</id>
    <published>2013-11-05T00:00:00Z</published>
    <updated>2013-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article vocab="http://schema.org/" typeof="BlogPosting">
  <h1 property="headline">Exploring HTTP Headers with <code>netcat</code></h1>

  <div class="post-metadata">
    <div class="post-date">
      <time datetime="2013-11-05" property="datePublished">November  5, 2013</time>
    </div>
    <div class="post-tags">tagged with: <a title="All pages tagged &#39;command-line&#39;." href="/tags/command-line.html">command-line</a>, <a title="All pages tagged &#39;http&#39;." href="/tags/http.html">http</a>, <a title="All pages tagged &#39;shell script&#39;." href="/tags/shell%20script.html">shell script</a>, <a title="All pages tagged &#39;linux&#39;." href="/tags/linux.html">linux</a></div>
  </div>

  <div property="articleBody">
    <p>One of the many great things about free and open source software and the whole GNU/Linux ecosystem are the simple yet powerful tools available. The possibilities enabled by almost trivial programs are incredible. A very positive side effect this has on me is that I like to go and explore technologies with the tools at my disposal. My latest experiments revolved around the %HTTP protocol, specifically %HTTP headers, and very basic open source networking tools.</p>
<h2 id="the-hypertext-transfer-protocol">The HyperText Transfer Protocol</h2>
<p>Webservers on the internet sending a website to a browser use the HyperText Transfer Protocol (%HTTP) to do so. Along with the HTML data for the page itself, the server answer includes additional information: Response code, cookies, and how the browser or proxy server should handle the contents is transfered within the <em>%HTTP header</em>. The ability of the headers to control state on the client side is what makes them so interesting and the reason why we are going to have a closer look at them.</p>
<h2 id="communicating-with-netcat">Communicating with <code>netcat</code></h2>
<p>Instead of building our own %HTTP client and server implementations – that would be total overkill – we restrict the goal to a simple networking tool that can be made to receive, send and alter basic %HTTP commands: <code>netcat</code>, the self-described TCP/IP swiss army knife, combined with basic shell scripts.</p>
<p>We start by setting up a basic echoing server which sends everything back the same way it was received.</p>
<pre class="shell"><code>nc -l -p 8042 -e &#39;/bin/cat&#39;</code></pre>
<p>Pointing the browser at <code>http://localhost:8042</code>, then killing the <code>netcat</code> process manually by hitting <code>Control-C</code>, we can see the headers we sent within our browser. Everything that is send to our simple server is put through the <code>cat</code> program, which just passes it on to STDOUT, which is then sent back to the connecting browser. The process has to be terminated manually, as it doesn’t know when to stop listening for more input. It’s crude, yet effective.</p>
<h2 id="shell-scripting-for-more-advanced-features">Shell Scripting for more advanced features</h2>
<p>The above is neither comfortable to use nor very good to toy with, so we replace <code>cat</code> with a script of our own, we’ll call it <code>exploring-http.sh</code>:</p>
<pre class="shell"><code>#!/bin/sh

# Keep reading everything until we hit the first empty line
read_headers ()
{
    read i
    while [ -n &quot;$i&quot; ] &amp;&amp;
          [ &quot;$(echo -n &quot;\r\n&quot;)&quot; != &quot;$i&quot; ] &amp;&amp;
          [ &quot;$(echo -n &quot;\n&quot;)&quot; != &quot;$i&quot; ]
    do
        echo &quot;$i&quot;
        read i
    done
}
request_headers=&quot;$(read_headers)&quot;

# Get some response headers ready
response_headers ()
{
    printf &quot;HTTP/1.1 200 OK\r\n&quot;
    printf &quot;Content-Type: text/plain\r\n&quot;
    printf &quot;\r\n&quot;
}

# Send the response
respond ()
{
    local response_headers=&quot;$(response_headers)&quot;
    echo &quot;${response_headers}&quot;
    echo &quot;Browser Request Headers&quot;
    echo &quot;=======================&quot;
    echo &quot;$request_headers&quot;
    echo &quot;\r\n&quot;
    echo &quot;Server Response Headers&quot;
    echo &quot;=======================&quot;
    echo &quot;${response_headers}&quot;
}

respond</code></pre>
<p>The request send by the browser is read till we reach the first black line, signaling the end of the request header. This time, we follow the protocol by prefixing the content with very simple response headers before sending it back to the browser. We also don’t have to manually terminate our <code>netcat</code> server, it terminates after answering to the request. Starting it again after each request is tedious, so we automate it and put it into a loop, restarting the server immediately once it terminates.</p>
<pre class="shell"><code>sh -c &#39;while true; do nc -l -p 8042 -e exploring-http.sh; done&#39;</code></pre>
<p>Now we are free to experiment with %HTTP headers and the way browser and server interact. For example, we can let the server add a <code>Last-Modified</code> header, the content of which should be sent back by the browser in the next request:</p>
<pre class="shell"><code>response_headers ()
{
    printf &quot;HTTP/1.1 200 OK\r\n&quot;
    printf &quot;Content-Type: text/plain\r\n&quot;
    printf &quot;Last-Modified: $(date --rfc-2822)\r\n&quot;
    printf &quot;\r\n&quot;
}</code></pre>
<p>Reloading twice, and the browser request will change to send an additional <code>If-Modified-Since</code> header.</p>
<h2 id="etags">ETags</h2>
<p>The functionality of ETags, designed to communicate caching of old files, can be used follow users around without the need of cookies. Let’s see if we can do this with our little server.</p>
<p>The function generating the response headers is modified to extract any ETag supplied by the browser. If none exists, we generate a new one by hashing the number of nanoseconds passed since the beginning of the UNIX epoche. The parsed or newly generated etag is then sent back to the browser. We also add a few header to make sure the conents isn’t cached. As a result, we should be able to track a user through his or her browser cache.</p>
<pre class="shell"><code>response_headers ()
{
    local etag
    etag=$(echo &quot;${request_headers}&quot; | sed -ne &#39;s/^\(If-None-Match: &quot;\([a-f0-9]*\)&quot;.*\)/\2/gp&#39;)
    printf &quot;HTTP/1.1 200 OK\r\n&quot;
    printf &quot;Content-Type: text/plain\r\n&quot;
    printf &quot;Last-Modified: $(date --rfc-2822)\r\n&quot;
    printf &quot;ETag: \&quot;${etag:-$(date +%s%N | md5sum | cut -d&#39; &#39; -f1)}\&quot;\r\n&quot;
    printf &quot;Expires: Tue, 01 Jan 2013 00:00:01 GMT\r\n&quot;
    printf &quot;Cache-Control: max-age=0\r\n&quot;
    printf &quot;Connection: keep-alive\r\n&quot;
    printf &quot;\r\n&quot;
}</code></pre>
<p>We can test this by reloading our test page twice and… it works! We can reload as often as we want, the ETag header sent by the browser will not change unless we clear the browser’s cache. A stealthy kind of user tracking can be simulated with just a few lines of shell script.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Even though we used nothing but simple command line tools and shell scripting, we managed to build a simple server and to experiment with the ways in which stateless servers and stateful browseres can effect each other through %HTTP headers. Standard UNIX tools are very powerful by themselves; together with a tool like <code>netcat</code>, power and fun extend even into experiments with networking and default protocols.</p>
  </div>
</article>
]]></summary>
</entry>

</feed>
